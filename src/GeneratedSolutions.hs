-- This File is generated by scripts/generate-sources.sh.
module GeneratedSolutions (solutions, Year, Day) where

import Solution
import qualified Y2018.Day01
import qualified Y2018.Day02
import qualified Y2018.Day03
import qualified Y2018.Day04
import qualified Y2018.Day05
import qualified Y2019.Day01
import qualified Y2019.Day02
import qualified Y2019.Day03
import qualified Y2019.Day04
import qualified Y2019.Day05
import qualified Y2019.Day06
import qualified Y2019.Day07
import qualified Y2019.Day08
import qualified Y2019.Day09
import qualified Y2019.Day10
import qualified Y2019.Day11
import qualified Y2019.Day12
import qualified Y2019.Day13
import qualified Y2019.Day14
import qualified Y2019.Day15
import qualified Y2019.Day16
import qualified Y2019.Day17
import qualified Y2019.Day18
import qualified Y2019.Day19
import qualified Y2019.Day20
import qualified Y2019.Day21
import qualified Y2019.Day22
import qualified Y2019.Day23
import qualified Y2019.Day24
import qualified Y2019.Day25
import qualified Y2020.Day01
import qualified Y2020.Day02
import qualified Y2020.Day03
import qualified Y2020.Day04
import qualified Y2020.Day05
import qualified Y2020.Day06
import qualified Y2020.Day07
import qualified Y2020.Day08
import qualified Y2020.Day09
import qualified Y2020.Day10
import qualified Y2020.Day11
import qualified Y2020.Day12
import qualified Y2020.Day13
import qualified Y2020.Day14
import qualified Y2020.Day15
import qualified Y2020.Day16
import qualified Y2020.Day17
import qualified Y2020.Day18
import qualified Y2020.Day19
import qualified Y2020.Day20
import qualified Y2020.Day21
import qualified Y2020.Day22
import qualified Y2020.Day23
import qualified Y2020.Day24
import qualified Y2020.Day25
import qualified Y2021.Day01
import qualified Y2021.Day02
import qualified Y2021.Day03
import qualified Y2021.Day04
import qualified Y2021.Day05
import qualified Y2021.Day06
import qualified Y2021.Day07
import qualified Y2021.Day08
import qualified Y2021.Day09
import qualified Y2021.Day10
import qualified Y2021.Day11
import qualified Y2021.Day12
import qualified Y2021.Day13
import qualified Y2021.Day14
import qualified Y2021.Day15
import qualified Y2021.Day16
import qualified Y2021.Day17
import qualified Y2021.Day18
import qualified Y2021.Day19
import qualified Y2021.Day20
import qualified Y2021.Day21
import qualified Y2021.Day22
import qualified Y2021.Day23
import qualified Y2021.Day24
import qualified Y2021.Day25
import qualified Y2022.Day01
import qualified Y2022.Day02

type Year = String
type Day  = String

solutions :: [((Year, Day), Solveable DaySolution)]
solutions = concat
    [ daysFor "2018" days2018
    , daysFor "2019" days2019
    , daysFor "2020" days2020
    , daysFor "2021" days2021
    , daysFor "2022" days2022
    ]
  where
    days2018 =
      [ solve Y2018.Day01.parts
      , solve Y2018.Day02.parts
      , solve Y2018.Day03.parts
      , solve Y2018.Day04.parts
      , solve Y2018.Day05.parts
      ]
    days2019 =
      [ solve Y2019.Day01.parts
      , solve Y2019.Day02.parts
      , solve Y2019.Day03.parts
      , solve Y2019.Day04.parts
      , solve Y2019.Day05.parts
      , solve Y2019.Day06.parts
      , solve Y2019.Day07.parts
      , solve Y2019.Day08.parts
      , solve Y2019.Day09.parts
      , solve Y2019.Day10.parts
      , solve Y2019.Day11.parts
      , solve Y2019.Day12.parts
      , solve Y2019.Day13.parts
      , solve Y2019.Day14.parts
      , solve Y2019.Day15.parts
      , solve Y2019.Day16.parts
      , solve Y2019.Day17.parts
      , solve Y2019.Day18.parts
      , solve Y2019.Day19.parts
      , solve Y2019.Day20.parts
      , solve Y2019.Day21.parts
      , solve Y2019.Day22.parts
      , solve Y2019.Day23.parts
      , solve Y2019.Day24.parts
      , solve Y2019.Day25.parts
      ]
    days2020 =
      [ solve Y2020.Day01.parts
      , solve Y2020.Day02.parts
      , solve Y2020.Day03.parts
      , solve Y2020.Day04.parts
      , solve Y2020.Day05.parts
      , solve Y2020.Day06.parts
      , solve Y2020.Day07.parts
      , solve Y2020.Day08.parts
      , solve Y2020.Day09.parts
      , solve Y2020.Day10.parts
      , solve Y2020.Day11.parts
      , solve Y2020.Day12.parts
      , solve Y2020.Day13.parts
      , solve Y2020.Day14.parts
      , solve Y2020.Day15.parts
      , solve Y2020.Day16.parts
      , solve Y2020.Day17.parts
      , solve Y2020.Day18.parts
      , solve Y2020.Day19.parts
      , solve Y2020.Day20.parts
      , solve Y2020.Day21.parts
      , solve Y2020.Day22.parts
      , solve Y2020.Day23.parts
      , solve Y2020.Day24.parts
      , solve Y2020.Day25.parts
      ]
    days2021 =
      [ solve Y2021.Day01.parts
      , solve Y2021.Day02.parts
      , solve Y2021.Day03.parts
      , solve Y2021.Day04.parts
      , solve Y2021.Day05.parts
      , solve Y2021.Day06.parts
      , solve Y2021.Day07.parts
      , solve Y2021.Day08.parts
      , solve Y2021.Day09.parts
      , solve Y2021.Day10.parts
      , solve Y2021.Day11.parts
      , solve Y2021.Day12.parts
      , solve Y2021.Day13.parts
      , solve Y2021.Day14.parts
      , solve Y2021.Day15.parts
      , solve Y2021.Day16.parts
      , solve Y2021.Day17.parts
      , solve Y2021.Day18.parts
      , solve Y2021.Day19.parts
      , solve Y2021.Day20.parts
      , solve Y2021.Day21.parts
      , solve Y2021.Day22.parts
      , solve Y2021.Day23.parts
      , solve Y2021.Day24.parts
      , solve Y2021.Day25.parts
      ]
    days2022 =
      [ solve Y2022.Day01.parts
      , solve Y2022.Day02.parts
      ]

daysFor :: Year
        -> [Solveable DaySolution]
        -> [((Year, Day), Solveable DaySolution)]
daysFor y ps = [ ((y, fmt d), p) | (d, p) <- zip [1..] ps]
  where
    fmt d | d < 10    = '0':show d
          | otherwise = show d
